//////////////// Unary penalty /////////////////////

static std::vector<cv::Mat> H;

void initUnaryPenalty(Mat imL, Mat imR, int maxdisp)
{
	int width = imL.cols, height = imL.rows;
	MAX_DISP = maxdisp;
	WIDTH = width;

	for (int row = 0; row < height; row++)
	{
		Mat temp = Mat::zeros(width, MAX_DISP, CV_8UC1);
		for (int i = 0; i < width; i++)
		{
			for (int di = 0; di < MAX_DISP; di++) // TODO Possible mistakes here
			{
				if (i >= di) temp.at<uchar>(i, di) = abs( (int)imL.at<uchar>(row, i) - (int)imR.at<uchar>(row, i - di) );
				else temp.at<uchar>(i, di) = 255;
			}
		}
		H.push_back(temp);
	}
	std::cout << ">Unary penalty matrix initialised!" << std::endl;
}

int unaryPenalty(int row, int i, int disp)
{
	return (int)H[row].at<uchar>(i, disp);
}




//////////////// Binary penalty /////////////////////

Mat g;

void initBinaryPenalty(int maxdisp)
{
	g = Mat::zeros(maxdisp, maxdisp, CV_8UC1);
	for (int di = 0; di < maxdisp; di++)
	{
		for (int dj = 0; dj < maxdisp; dj++)
		{
			g.at<uchar>(di, dj) = abs(di - dj); // TODO shoudI do it the other way? Like, it's simetrical and not random
		}
	}
	std::cout <<">Binary penalty matrix initialised!"<< std::endl;
}

int binaryPenalty(int di, int dj)
{
	return (int)g.at<uchar>(di, dj);
}





/////////////////////////////////////

std::cout << "> Test: " << (int)imL.at<uchar>(0, 0)<< std::endl;
std::cout << "> Test: " << (int)imL.at<uchar>(height - 1, 0) << std::endl;
std::cout << "> Test: " << (int)imL.at<uchar>(0, width - 1) << std::endl;
std::cout << "> Test: " << (int)imL.at<uchar>(height - 1, width - 1) << std::endl;


std::cout << (int)imgL.at<uchar>(0, 0) << std::endl;
std::cout << (int)imgL.at<uchar>(10, 10) << std::endl;
std::cout << (int)imgL.at<uchar>(0, 0) - (int)imgL.at<uchar>(10, 10) << std::endl;




/////////////////////////////////////
for (int r = 0; r < diff.rows; r++)
{
	for (int c = 0; c < diff.cols; c++)
	{
		diff.at<uchar>(r, c) = (int)imgL.at<uchar>(r, c) - (int)imgR.at<uchar>(r, c);
	}
}




/////////////////////////////////////
for (int r = 0; r < imgL.rows; r++)
	{
		for (int c = 0; c < imgL.cols; c++)
		{
			if (imgL.at<uchar>(r, c) > MAX_DISP) MAX_DISP = imgL.at<uchar>(r, c);
		}
	}




/////////////////////////////////////
absdiff(imgR, imgL, diffClr);
bitwise_not(diffClr, diffGrs);

split(diffClr, BGR);
	diffGrs = BGR[0] * 0.0722f + BGR[1] * 0.7152f + BGR[2] * 0.2126f;




/////////////////////////////////////
std::cout <<"Max / Min disparity: "<< MAX_DISP<<" / " << MIN_DISP <<std::endl;




//////////////// DISPLAYING /////////////////////

	namedWindow("Left", WINDOW_FREERATIO);
	namedWindow("Right", WINDOW_FREERATIO);
	namedWindow("DiffClr", WINDOW_FREERATIO);
	namedWindow("DiffGrs", WINDOW_FREERATIO);


	imshow("Left", imgL);
	imshow("Right", imgR);
	imshow("DiffClr", diffClr);
	imshow("DiffGrs", diffGrs);


	resizeWindow("Left", imgL.cols * Scale, imgL.rows * Scale);
	resizeWindow("Right", imgR.cols * Scale, imgR.rows * Scale);
	resizeWindow("DiffClr", imgL.cols * Scale, imgL.rows * Scale);
	resizeWindow("DiffGrs", imgR.cols * Scale, imgR.rows * Scale);


	moveWindow("Left", WindowStartX, WindowStartY);
	moveWindow("Right", WindowStartX + imgL.cols * Scale + WindowMargin, WindowStartY);
	moveWindow("DiffClr", WindowStartX, WindowStartY + imgL.rows * Scale + WindowMargin + 30);
	moveWindow("DiffGrs", WindowStartX + imgL.cols * Scale + WindowMargin, WindowStartY + imgL.rows * Scale + WindowMargin + 30);

*/


Mat test = Mat::zeros(100, 10, CV_8UC1);
    std::cout << "Width: " << test.cols << " Height: " << test.rows << std::endl; //For reference on args positions
    